%% Practice System Architecture Diagram
flowchart TD
    %% UI Layer
    PracticeUI["Practice UI
    (templates/practice/)
    - Renders practice interface
    - Handles user interactions
    - Manages client-side state"]
    
    StaticAssets["Static Assets
    (static/js/practice.js)
    - Contains JavaScript/CSS
    - Manages client-side logic
    - Handles UI interactions"]
    
    Layouts["Layouts
    (templates/layouts/)
    - Defines UI structure
    - Handles view rendering
    - Manages theme styles"]
    
    %% Application Layer
    PracticeRoutes["Practice Routes
    (routes/practice_routes.py)
    - Handles HTTP requests
    - Routes to appropriate services
    - Manages API endpoints"]
    
    AuthSystem["Auth System
    (routes/auth_routes.py)
    - Handles user authentication
    - Manages session security
    - Controls access permissions"]
    
    WebSockets["Real-time
    (websockets/quiz.py)
    - Handles real-time updates
    - Manages WebSocket connections
    - Pushes notifications"]
    
    ProgressRoutes["Progress Routes
    (routes/progress_routes.py)
    - Tracks student progress
    - Generates analytics
    - Manages performance data"]
    
    %% Service Layer
    PracticeTracker["Practice Tracker
    (utils/practice_tracker.py)
    - Tracks user attempts
    - Validates problem answers
    - Manages practice sessions"]
    
    ProgressService["Progress Service
    (services/progress_service.py)
    - Calculates user progress
    - Generates performance reports
    - Tracks mastery levels"]
    
    MathProblems["Math Problems
    (utils/math_problems.py)
    - Generates math problems
    - Validates problem solutions
    - Manages problem difficulty"]
    
    Standards["Math Standards
    (standards/standard.py)
    - Manages curriculum standards
    - Aligns problems with levels
    - Tracks Common Core alignment"]
    
    %% Data Layer
    Database["Database
    (SQLAlchemy Models)
    - Stores all application data
    - Manages data relationships
    - Handles data persistence"]
    
    UserModel["User Model
    (models/user.py)
    - Defines user attributes
    - Manages user relationships
    - Handles user data operations"]
    
    PracticeModel["Practice Model
    (models/practice_attempt.py)
    - Tracks practice attempts
    - Manages session data
    - Stores problem history"]
    
    %% Relationships
    PracticeUI -->|AJAX/HTTP Requests| PracticeRoutes
    Layouts -->|Render Views| PracticeUI
    StaticAssets -->|Client Logic| PracticeUI
    WebSockets -->|Real-time Updates| PracticeUI
    
    PracticeRoutes -->|Get Problems| PracticeTracker
    PracticeRoutes -->|Check Progress| ProgressService
    PracticeRoutes -->|Authentication| AuthSystem
    PracticeRoutes -->|Track Progress| ProgressRoutes
    
    PracticeTracker -->|Store Attempts| Database
    ProgressService -->|Query Stats| Database
    MathProblems -->|Generate Problems| PracticeTracker
    Standards -->|Align Problems| MathProblems
    UserModel -->|ORM Mapping| Database
    PracticeModel -->|Store Attempts| Database
    
    %% Styling
    classDef uiLayer fill:#a6cee3,stroke:#333,stroke-width:2px
    classDef appLayer fill:#b2df8a,stroke:#333,stroke-width:2px
    classDef serviceLayer fill:#fdbf6f,stroke:#333,stroke-width:2px
    classDef dataLayer fill:#fb9a99,stroke:#333,stroke-width:2px
    
    class PracticeUI,Templates,StaticAssets uiLayer
    class PracticeRoutes,AuthSystem,WebSockets appLayer
    class PracticeTracker,ProgressService,MathProblems serviceLayer
    class Database,UserModel dataLayer
